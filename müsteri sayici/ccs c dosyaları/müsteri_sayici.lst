CCS PCM C Compiler, Version 5.007, 61971               08-Nis-22 17:30

               Filename:   C:\Users\can\Documents\müsteri_sayici.lst

               ROM used:   684 words (33%)
                           Largest free fragment is 1364
               RAM used:   20 (9%) at main() level
                           39 (17%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   23E
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  BTFSS  0B.5
001B:  GOTO   01E
001C:  BTFSC  0B.2
001D:  GOTO   064
001E:  BTFSS  0B.4
001F:  GOTO   022
0020:  BTFSC  0B.1
0021:  GOTO   06C
0022:  MOVF   22,W
0023:  MOVWF  04
0024:  MOVF   23,W
0025:  MOVWF  77
0026:  MOVF   24,W
0027:  MOVWF  78
0028:  MOVF   25,W
0029:  MOVWF  79
002A:  MOVF   26,W
002B:  MOVWF  7A
002C:  MOVF   27,W
002D:  MOVWF  0A
002E:  SWAPF  21,W
002F:  MOVWF  03
0030:  SWAPF  7F,F
0031:  SWAPF  7F,W
0032:  RETFIE
.................... #include <müsteri_sayici.h> 
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
0033:  BCF    0A.0
0034:  BCF    0A.1
0035:  BCF    0A.2
0036:  ADDWF  02,F
0037:  RETLW  28
0038:  RETLW  0C
0039:  RETLW  01
003A:  RETLW  06
003B:  BCF    0A.0
003C:  BCF    0A.1
003D:  BCF    0A.2
003E:  ADDWF  02,F
003F:  RETLW  0C
0040:  RETLW  20
0041:  RETLW  43
0042:  RETLW  41
0043:  RETLW  4E
0044:  RETLW  20
0045:  RETLW  42
0046:  RETLW  41
0047:  RETLW  4B
0048:  RETLW  4B
0049:  RETLW  41
004A:  RETLW  4C
004B:  RETLW  00
004C:  BCF    0A.0
004D:  BCF    0A.1
004E:  BCF    0A.2
004F:  ADDWF  02,F
0050:  RETLW  74
0051:  RETLW  6F
0052:  RETLW  70
0053:  RETLW  3D
0054:  RETLW  25
0055:  RETLW  6C
0056:  RETLW  64
0057:  RETLW  00
0058:  BCF    0A.0
0059:  BCF    0A.1
005A:  BCF    0A.2
005B:  ADDWF  02,F
005C:  RETLW  69
005D:  RETLW  63
005E:  RETLW  3D
005F:  RETLW  20
0060:  RETLW  25
0061:  RETLW  6C
0062:  RETLW  64
0063:  RETLW  00
*
01BE:  CLRF   36
01BF:  MOVF   04,W
01C0:  MOVWF  35
01C1:  BCF    36.0
01C2:  BTFSC  03.7
01C3:  BSF    36.0
01C4:  BTFSS  2F.7
01C5:  GOTO   1CE
01C6:  BSF    35.7
01C7:  BTFSS  35.4
01C8:  INCF   35,F
01C9:  COMF   2E,F
01CA:  COMF   2F,F
01CB:  INCF   2E,F
01CC:  BTFSC  03.2
01CD:  INCF   2F,F
01CE:  SWAPF  2F,W
01CF:  IORLW  F0
01D0:  MOVWF  31
01D1:  ADDWF  31,F
01D2:  ADDLW  E2
01D3:  MOVWF  32
01D4:  ADDLW  32
01D5:  MOVWF  34
01D6:  MOVF   2F,W
01D7:  ANDLW  0F
01D8:  ADDWF  32,F
01D9:  ADDWF  32,F
01DA:  ADDWF  34,F
01DB:  ADDLW  E9
01DC:  MOVWF  33
01DD:  ADDWF  33,F
01DE:  ADDWF  33,F
01DF:  SWAPF  2E,W
01E0:  ANDLW  0F
01E1:  ADDWF  33,F
01E2:  ADDWF  34,F
01E3:  RLF    33,F
01E4:  RLF    34,F
01E5:  COMF   34,F
01E6:  RLF    34,F
01E7:  MOVF   2E,W
01E8:  ANDLW  0F
01E9:  ADDWF  34,F
01EA:  RLF    31,F
01EB:  MOVLW  07
01EC:  MOVWF  30
01ED:  MOVLW  0A
01EE:  ADDWF  34,F
01EF:  DECF   33,F
01F0:  BTFSS  03.0
01F1:  GOTO   1EE
01F2:  ADDWF  33,F
01F3:  DECF   32,F
01F4:  BTFSS  03.0
01F5:  GOTO   1F2
01F6:  ADDWF  32,F
01F7:  DECF   31,F
01F8:  BTFSS  03.0
01F9:  GOTO   1F6
01FA:  ADDWF  31,F
01FB:  DECF   30,F
01FC:  BTFSS  03.0
01FD:  GOTO   1FA
01FE:  MOVLW  30
01FF:  MOVWF  04
0200:  BCF    03.7
0201:  MOVLW  07
0202:  ANDWF  35,W
0203:  BCF    35.6
0204:  DECF   04,F
0205:  ANDWF  35,W
0206:  BTFSS  03.2
0207:  GOTO   20F
0208:  BTFSC  35.4
0209:  INCF   04,F
020A:  BTFSC  35.4
020B:  GOTO   20F
020C:  MOVLW  20
020D:  MOVWF  77
020E:  GOTO   22C
020F:  ADDWF  04,F
0210:  MOVLW  34
0211:  SUBWF  04,W
0212:  BTFSC  03.2
0213:  BSF    35.6
0214:  MOVF   00,W
0215:  MOVWF  77
0216:  BTFSS  03.2
0217:  GOTO   220
0218:  BTFSC  35.6
0219:  GOTO   220
021A:  BTFSC  35.4
021B:  GOTO   23A
021C:  BTFSC  35.3
021D:  GOTO   220
021E:  MOVLW  20
021F:  GOTO   22B
0220:  BTFSS  35.7
0221:  GOTO   228
0222:  MOVLW  2D
0223:  MOVWF  77
0224:  DECF   04,F
0225:  BCF    35.6
0226:  BCF    35.7
0227:  GOTO   22C
0228:  BSF    35.3
0229:  BCF    35.4
022A:  MOVLW  30
022B:  ADDWF  77,F
022C:  CLRF   2F
022D:  MOVF   04,W
022E:  MOVWF  2E
022F:  BCF    2F.0
0230:  BTFSC  03.7
0231:  BSF    2F.0
0232:  MOVF   77,W
0233:  MOVWF  37
0234:  CALL   192
0235:  MOVF   2E,W
0236:  MOVWF  04
0237:  BCF    03.7
0238:  BTFSC  2F.0
0239:  BSF    03.7
023A:  INCF   04,F
023B:  BTFSS  35.6
023C:  GOTO   210
023D:  RETURN
....................  
.................... #list 
....................  
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
*
0078:  MOVLW  38
0079:  MOVWF  04
007A:  BCF    03.7
007B:  MOVF   00,W
007C:  BTFSC  03.2
007D:  GOTO   08C
007E:  MOVLW  01
007F:  MOVWF  78
0080:  CLRF   77
0081:  DECFSZ 77,F
0082:  GOTO   081
0083:  DECFSZ 78,F
0084:  GOTO   080
0085:  MOVLW  4A
0086:  MOVWF  77
0087:  DECFSZ 77,F
0088:  GOTO   087
0089:  GOTO   08A
008A:  DECFSZ 00,F
008B:  GOTO   07E
008C:  RETURN
....................  
....................  
.................... int16 toplam_kisi=0;//toplam icin 
.................... int16 icerdeki_kisi=0;//içerde kaç kiþi  
.................... int16 fark=0;//fark deðeri 
....................  
.................... #INT_RTCC// TMR0 kesmesi  
.................... void  RTCC_isr(void) //TMR0 kesme alt programý 
.................... { 
....................  
.................... set_timer0(255);// bu degerden baslatarak hemen sýfýrlanmasý saðlanýyor 
*
0064:  MOVLW  FF
0065:  MOVWF  01
.................... toplam_kisi++;//toplam_kisi degerini 1 artir 
0066:  INCF   28,F
0067:  BTFSC  03.2
0068:  INCF   29,F
....................  
.................... } 
....................  
0069:  BCF    0B.2
006A:  BCF    0A.3
006B:  GOTO   022
.................... #INT_EXT//RB0 diþ kesme programi 
.................... void  EXT_isr(void)  
.................... { 
.................... if(fark>0)// magaza hic kimse giris yapmamasi durumunda icerdeki kisi degeri nagatif deger almasin 
006C:  MOVF   2C,F
006D:  BTFSS  03.2
006E:  GOTO   072
006F:  MOVF   2D,F
0070:  BTFSC  03.2
0071:  GOTO   075
.................... icerdeki_kisi++;//içerdeki_kisi degeri 1 artir 
0072:  INCF   2A,F
0073:  BTFSC  03.2
0074:  INCF   2B,F
....................  
.................... } 
.................... #define LCD_ENABLE_PIN PIN_B1//lcd ekran baglanti pinleri 
.................... #define LCD_RS_PIN PIN_B2 
.................... #define LCD_RW_PIN PIN_B3 
.................... #define LCD_DATA4 PIN_B4 
.................... #define LCD_DATA5 PIN_B5 
.................... #define LCD_DATA6 PIN_B6 
.................... #define LCD_DATA7 PIN_B7 
....................  
.................... #include <lcd.c>//lcd ekran kullanim kutuphanesi 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
0075:  BCF    0B.1
0076:  BCF    0A.3
0077:  GOTO   022
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00F1:  BSF    06.4
....................    output_float(LCD_DATA5); 
00F2:  BSF    06.5
....................    output_float(LCD_DATA6); 
00F3:  BSF    06.6
....................    output_float(LCD_DATA7); 
00F4:  BSF    06.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00F5:  BCF    03.5
00F6:  BSF    06.3
00F7:  BSF    03.5
00F8:  BCF    06.3
....................    delay_cycles(1); 
00F9:  NOP
....................    lcd_output_enable(1); 
00FA:  BCF    03.5
00FB:  BSF    06.1
00FC:  BSF    03.5
00FD:  BCF    06.1
....................    delay_cycles(1); 
00FE:  NOP
....................    high = lcd_read_nibble(); 
00FF:  BCF    03.5
0100:  CALL   0B8
0101:  MOVF   78,W
0102:  MOVWF  3F
....................        
....................    lcd_output_enable(0); 
0103:  BCF    06.1
0104:  BSF    03.5
0105:  BCF    06.1
....................    delay_cycles(1); 
0106:  NOP
....................    lcd_output_enable(1); 
0107:  BCF    03.5
0108:  BSF    06.1
0109:  BSF    03.5
010A:  BCF    06.1
....................    delay_us(1); 
010B:  NOP
....................    low = lcd_read_nibble(); 
010C:  BCF    03.5
010D:  CALL   0B8
010E:  MOVF   78,W
010F:  MOVWF  3E
....................        
....................    lcd_output_enable(0); 
0110:  BCF    06.1
0111:  BSF    03.5
0112:  BCF    06.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0113:  BCF    06.4
....................    output_drive(LCD_DATA5); 
0114:  BCF    06.5
....................    output_drive(LCD_DATA6); 
0115:  BCF    06.6
....................    output_drive(LCD_DATA7); 
0116:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0117:  BCF    03.5
0118:  SWAPF  3F,W
0119:  MOVWF  77
011A:  MOVLW  F0
011B:  ANDWF  77,F
011C:  MOVF   77,W
011D:  IORWF  3E,W
011E:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
00B8:  CLRF   40
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
00B9:  BSF    03.5
00BA:  BSF    06.4
00BB:  MOVLW  00
00BC:  BCF    03.5
00BD:  BTFSC  06.4
00BE:  MOVLW  01
00BF:  IORWF  40,F
....................    n |= input(LCD_DATA5) << 1; 
00C0:  BSF    03.5
00C1:  BSF    06.5
00C2:  MOVLW  00
00C3:  BCF    03.5
00C4:  BTFSC  06.5
00C5:  MOVLW  01
00C6:  MOVWF  77
00C7:  BCF    03.0
00C8:  RLF    77,F
00C9:  MOVF   77,W
00CA:  IORWF  40,F
....................    n |= input(LCD_DATA6) << 2; 
00CB:  BSF    03.5
00CC:  BSF    06.6
00CD:  MOVLW  00
00CE:  BCF    03.5
00CF:  BTFSC  06.6
00D0:  MOVLW  01
00D1:  MOVWF  77
00D2:  RLF    77,F
00D3:  RLF    77,F
00D4:  MOVLW  FC
00D5:  ANDWF  77,F
00D6:  MOVF   77,W
00D7:  IORWF  40,F
....................    n |= input(LCD_DATA7) << 3; 
00D8:  BSF    03.5
00D9:  BSF    06.7
00DA:  MOVLW  00
00DB:  BCF    03.5
00DC:  BTFSC  06.7
00DD:  MOVLW  01
00DE:  MOVWF  77
00DF:  RLF    77,F
00E0:  RLF    77,F
00E1:  RLF    77,F
00E2:  MOVLW  F8
00E3:  ANDWF  77,F
00E4:  MOVF   77,W
00E5:  IORWF  40,F
....................     
....................    return(n); 
00E6:  MOVF   40,W
00E7:  MOVWF  78
....................   #else 
00E8:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
008D:  BTFSC  3F.0
008E:  GOTO   091
008F:  BCF    06.4
0090:  GOTO   092
0091:  BSF    06.4
0092:  BSF    03.5
0093:  BCF    06.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0094:  BCF    03.5
0095:  BTFSC  3F.1
0096:  GOTO   099
0097:  BCF    06.5
0098:  GOTO   09A
0099:  BSF    06.5
009A:  BSF    03.5
009B:  BCF    06.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
009C:  BCF    03.5
009D:  BTFSC  3F.2
009E:  GOTO   0A1
009F:  BCF    06.6
00A0:  GOTO   0A2
00A1:  BSF    06.6
00A2:  BSF    03.5
00A3:  BCF    06.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
00A4:  BCF    03.5
00A5:  BTFSC  3F.3
00A6:  GOTO   0A9
00A7:  BCF    06.7
00A8:  GOTO   0AA
00A9:  BSF    06.7
00AA:  BSF    03.5
00AB:  BCF    06.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
00AC:  NOP
....................    lcd_output_enable(1); 
00AD:  BCF    03.5
00AE:  BSF    06.1
00AF:  BSF    03.5
00B0:  BCF    06.1
....................    delay_us(2); 
00B1:  GOTO   0B2
....................    lcd_output_enable(0); 
00B2:  BCF    03.5
00B3:  BCF    06.1
00B4:  BSF    03.5
00B5:  BCF    06.1
00B6:  BCF    03.5
00B7:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00E9:  BSF    03.5
00EA:  BCF    06.1
....................    lcd_rs_tris(); 
00EB:  BCF    06.2
....................    lcd_rw_tris(); 
00EC:  BCF    06.3
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00ED:  BCF    03.5
00EE:  BCF    06.2
00EF:  BSF    03.5
00F0:  BCF    06.2
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
011F:  MOVF   78,W
0120:  MOVWF  3E
0121:  BTFSS  3E.7
0122:  GOTO   125
0123:  BSF    03.5
0124:  GOTO   0F1
....................    lcd_output_rs(address); 
0125:  MOVF   3C,F
0126:  BTFSS  03.2
0127:  GOTO   12A
0128:  BCF    06.2
0129:  GOTO   12B
012A:  BSF    06.2
012B:  BSF    03.5
012C:  BCF    06.2
....................    delay_cycles(1); 
012D:  NOP
....................    lcd_output_rw(0); 
012E:  BCF    03.5
012F:  BCF    06.3
0130:  BSF    03.5
0131:  BCF    06.3
....................    delay_cycles(1); 
0132:  NOP
....................    lcd_output_enable(0); 
0133:  BCF    03.5
0134:  BCF    06.1
0135:  BSF    03.5
0136:  BCF    06.1
....................    lcd_send_nibble(n >> 4); 
0137:  BCF    03.5
0138:  SWAPF  3D,W
0139:  MOVWF  3E
013A:  MOVLW  0F
013B:  ANDWF  3E,F
013C:  MOVF   3E,W
013D:  MOVWF  3F
013E:  CALL   08D
....................    lcd_send_nibble(n & 0xf); 
013F:  MOVF   3D,W
0140:  ANDLW  0F
0141:  MOVWF  3E
0142:  MOVWF  3F
0143:  CALL   08D
0144:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0145:  BSF    03.5
0146:  BCF    06.4
....................    output_drive(LCD_DATA5); 
0147:  BCF    06.5
....................    output_drive(LCD_DATA6); 
0148:  BCF    06.6
....................    output_drive(LCD_DATA7); 
0149:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
014A:  BCF    06.1
....................    lcd_rs_tris(); 
014B:  BCF    06.2
....................    lcd_rw_tris(); 
014C:  BCF    06.3
....................  #endif 
....................  
....................    lcd_output_rs(0); 
014D:  BCF    03.5
014E:  BCF    06.2
014F:  BSF    03.5
0150:  BCF    06.2
....................    lcd_output_rw(0); 
0151:  BCF    03.5
0152:  BCF    06.3
0153:  BSF    03.5
0154:  BCF    06.3
....................    lcd_output_enable(0); 
0155:  BCF    03.5
0156:  BCF    06.1
0157:  BSF    03.5
0158:  BCF    06.1
....................      
....................    delay_ms(15); 
0159:  MOVLW  0F
015A:  BCF    03.5
015B:  MOVWF  38
015C:  CALL   078
....................    for(i=1;i<=3;++i) 
015D:  MOVLW  01
015E:  MOVWF  2E
015F:  MOVF   2E,W
0160:  SUBLW  03
0161:  BTFSS  03.0
0162:  GOTO   16B
....................    { 
....................        lcd_send_nibble(3); 
0163:  MOVLW  03
0164:  MOVWF  3F
0165:  CALL   08D
....................        delay_ms(5); 
0166:  MOVLW  05
0167:  MOVWF  38
0168:  CALL   078
0169:  INCF   2E,F
016A:  GOTO   15F
....................    } 
....................     
....................    lcd_send_nibble(2); 
016B:  MOVLW  02
016C:  MOVWF  3F
016D:  CALL   08D
....................    delay_ms(5); 
016E:  MOVLW  05
016F:  MOVWF  38
0170:  CALL   078
....................    for(i=0;i<=3;++i) 
0171:  CLRF   2E
0172:  MOVF   2E,W
0173:  SUBLW  03
0174:  BTFSS  03.0
0175:  GOTO   17F
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0176:  MOVF   2E,W
0177:  CALL   033
0178:  MOVWF  2F
0179:  CLRF   3C
017A:  MOVF   2F,W
017B:  MOVWF  3D
017C:  CALL   0E9
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
017D:  INCF   2E,F
017E:  GOTO   172
017F:  GOTO   257 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0180:  DECFSZ 39,W
0181:  GOTO   183
0182:  GOTO   186
....................       address=LCD_LINE_TWO; 
0183:  MOVLW  40
0184:  MOVWF  3A
0185:  GOTO   187
....................    else 
....................       address=0; 
0186:  CLRF   3A
....................       
....................    address+=x-1; 
0187:  MOVLW  01
0188:  SUBWF  38,W
0189:  ADDWF  3A,F
....................    lcd_send_byte(0,0x80|address); 
018A:  MOVF   3A,W
018B:  IORLW  80
018C:  MOVWF  3B
018D:  CLRF   3C
018E:  MOVF   3B,W
018F:  MOVWF  3D
0190:  CALL   0E9
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0191:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0192:  MOVF   37,W
0193:  XORLW  07
0194:  BTFSC  03.2
0195:  GOTO   1A0
0196:  XORLW  0B
0197:  BTFSC  03.2
0198:  GOTO   1A5
0199:  XORLW  06
019A:  BTFSC  03.2
019B:  GOTO   1AD
019C:  XORLW  02
019D:  BTFSC  03.2
019E:  GOTO   1B3
019F:  GOTO   1B8
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01A0:  MOVLW  01
01A1:  MOVWF  38
01A2:  MOVWF  39
01A3:  CALL   180
01A4:  GOTO   1BD
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01A5:  CLRF   3C
01A6:  MOVLW  01
01A7:  MOVWF  3D
01A8:  CALL   0E9
....................                      delay_ms(2); 
01A9:  MOVLW  02
01AA:  MOVWF  38
01AB:  CALL   078
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01AC:  GOTO   1BD
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01AD:  MOVLW  01
01AE:  MOVWF  38
01AF:  MOVLW  02
01B0:  MOVWF  39
01B1:  CALL   180
01B2:  GOTO   1BD
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01B3:  CLRF   3C
01B4:  MOVLW  10
01B5:  MOVWF  3D
01B6:  CALL   0E9
01B7:  GOTO   1BD
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01B8:  MOVLW  01
01B9:  MOVWF  3C
01BA:  MOVF   37,W
01BB:  MOVWF  3D
01BC:  CALL   0E9
....................      #endif 
....................    } 
01BD:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void main()//bir sefer çaliþacak kodlar  
*
023E:  CLRF   29
023F:  CLRF   28
0240:  CLRF   2B
0241:  CLRF   2A
0242:  CLRF   2D
0243:  CLRF   2C
0244:  MOVLW  07
0245:  MOVWF  1F
0246:  BCF    03.7
0247:  MOVLW  1F
0248:  ANDWF  03,F
.................... { 
....................     
....................    setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_1|RTCC_8_bit);//düsen kenardan yükselen kenara dogri kesme,0-256 arasi  
0249:  BSF    03.5
024A:  MOVF   01,W
024B:  ANDLW  C7
024C:  IORLW  28
024D:  MOVWF  01
....................    ext_int_edge(L_to_H);//RB0 dis kesmesi düsen kenardan yükselen kenara dogri 
024E:  BSF    01.6
....................    enable_interrupts(INT_RTCC);//RTCC kesme izin ver 
024F:  BCF    03.5
0250:  BSF    0B.5
....................    enable_interrupts(INT_EXT);//EXT  dis kesme izin ver 
0251:  BSF    0B.4
....................    enable_interrupts(GLOBAL);// tüm kesmeler acik 
0252:  MOVLW  C0
0253:  IORWF  0B,F
....................    set_timer0(255);//timer 0 baþlangic degeri 
0254:  MOVLW  FF
0255:  MOVWF  01
....................  
....................    lcd_init();//lcd ekran kullanýma aç 
0256:  GOTO   145
....................     
....................    lcd_gotoxy(1,1);//LCD ekran konum belirle 
0257:  MOVLW  01
0258:  MOVWF  38
0259:  MOVWF  39
025A:  CALL   180
....................    printf(lcd_putc,"\f CAN BAKKAL");//ekrani temizle metini ekrana yazdir 
025B:  CLRF   2E
025C:  MOVF   2E,W
025D:  CALL   03B
025E:  INCF   2E,F
025F:  MOVWF  77
0260:  MOVWF  37
0261:  CALL   192
0262:  MOVLW  0C
0263:  SUBWF  2E,W
0264:  BTFSS  03.2
0265:  GOTO   25C
....................    delay_ms(1000);//bir saniye bekle 
0266:  MOVLW  04
0267:  MOVWF  2E
0268:  MOVLW  FA
0269:  MOVWF  38
026A:  CALL   078
026B:  DECFSZ 2E,F
026C:  GOTO   268
....................  
....................  
....................  
....................    while(TRUE)//sonsuz dongu kisimi 
....................    { 
....................        
....................  
....................    fark=toplam_kisi-icerdeki_kisi;//iceride kac kisi oldugu fark degiskenine kayit ediliyor 
026D:  MOVF   2A,W
026E:  SUBWF  28,W
026F:  MOVWF  2C
0270:  MOVF   29,W
0271:  MOVWF  2D
0272:  MOVF   2B,W
0273:  BTFSS  03.0
0274:  INCFSZ 2B,W
0275:  SUBWF  2D,F
....................    
....................    lcd_gotoxy(1,2);//LCD ekran konumlandirma 
0276:  MOVLW  01
0277:  MOVWF  38
0278:  MOVLW  02
0279:  MOVWF  39
027A:  CALL   180
....................    printf(lcd_putc,"top=%ld",toplam_kisi);// toplam kisi ekrana yaz 
027B:  CLRF   2E
027C:  MOVF   2E,W
027D:  CALL   04C
027E:  INCF   2E,F
027F:  MOVWF  77
0280:  MOVWF  37
0281:  CALL   192
0282:  MOVLW  04
0283:  SUBWF  2E,W
0284:  BTFSS  03.2
0285:  GOTO   27C
0286:  MOVLW  10
0287:  MOVWF  04
0288:  MOVF   29,W
0289:  MOVWF  2F
028A:  MOVF   28,W
028B:  MOVWF  2E
028C:  CALL   1BE
....................    delay_ms(10); 
028D:  MOVLW  0A
028E:  MOVWF  38
028F:  CALL   078
....................    lcd_gotoxy(8,2); 
0290:  MOVLW  08
0291:  MOVWF  38
0292:  MOVLW  02
0293:  MOVWF  39
0294:  CALL   180
....................    printf(lcd_putc,"ic= %ld",fark);//icerdeki kisi sayisini ekrana yaz 
0295:  CLRF   2E
0296:  MOVF   2E,W
0297:  CALL   058
0298:  INCF   2E,F
0299:  MOVWF  77
029A:  MOVWF  37
029B:  CALL   192
029C:  MOVLW  04
029D:  SUBWF  2E,W
029E:  BTFSS  03.2
029F:  GOTO   296
02A0:  MOVLW  10
02A1:  MOVWF  04
02A2:  MOVF   2D,W
02A3:  MOVWF  2F
02A4:  MOVF   2C,W
02A5:  MOVWF  2E
02A6:  CALL   1BE
....................    delay_ms(10); 
02A7:  MOVLW  0A
02A8:  MOVWF  38
02A9:  CALL   078
02AA:  GOTO   26D
....................     
....................     
....................     
....................     
....................    } 
....................  
.................... } 
02AB:  SLEEP

Configuration Fuses:
   Word  1: 3F21   NOWDT PUT XT MCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
